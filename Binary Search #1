#There are two sorted arrays nums1 and nums2 of size m and n respectively.

#Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

#You may assume nums1 and nums2 cannot be both empty.

#Example 1:
#nums1 = [1, 3]
#nums2 = [2]

#The median is 2.0

#Example 2:

#nums1 = [1, 2]
#nums2 = [3, 4]

#The median is (2 + 3)/2 = 2.5

"""
Binary Search is a kind way of thinking, try a sequence of value and get closer to the answer, don't stick to their common appearence
"""

class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        if dividend == 0:
            return 0
        
        sign = -1
        
        if (dividend<0 and divisor<0) or (dividend>0 and divisor>0):
            sign = 1
        dividend = abs(dividend)
        divisor = abs(divisor)
                
        if dividend < divisor:
            return 0
        
        if divisor == 1:            
            if sign == 1:
                if dividend > 2**31-1:
                    return 2**31-1
                else:
                    return dividend
            else:
                if dividend < -2**31:
                    return -2**31
                else:
                    return -dividend
        
        ans = 0

        while dividend >= divisor:
            cnt = 1
            multi_divisor = divisor
            while dividend >= multi_divisor:
                dividend -= multi_divisor
                ans += cnt
                multi_divisor += multi_divisor
                cnt += cnt
                
        return  ans if sign == 1 else -ans
