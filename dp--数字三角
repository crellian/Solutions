#define _CRT_SECURE_NO_WARNINGS 
#include<cstdio>
#include<algorithm>
//#include<cstring>
using namespace std;
int tri[105][105];
int dp[105][105];
int route[105];
int N;
void DP()
{
	dp[1][1] = tri[1][1];
	for (int i = 2; i <= N; i++)
	for (int j = 1; j <= i; j++)
	{
		if (j == 1)
			dp[j][i] = dp[j][i - 1] + tri[j][i];
		else if (i == j)
			dp[j][i] = dp[j - 1][i - 1] + tri[j][i];
		else dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1]) + tri[j][i];
	}
}
int main()
{
	while (scanf("%d", &N))
	{
		/*memset(dp, 0, sizeof(dp));//清空
		memset(tri, 0, sizeof(tri));
		memset(route, 0, sizeof(route));*/
		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= i; j++)
				scanf("%d", &tri[j][i]);
			DP();
		int max = dp[1][N];
		int temp;
		for (int j =N; j >=1; j--)
		{
			if (max < dp[j][N])
			{
				max = dp[j][N];
				temp = j;
			}
		}
		route[N] = tri[temp][N];
		for (int i = N - 1; i >= 1; i--)
		{
			if (temp == 1)
				route[i] = tri[1][i];
			else if (temp == i)
			{
				route[i] = tri[i - 1][i];
				temp = i - 1;
			}
			else if (dp[temp][i]>dp[temp - 1][i])  //xiangdeng?
				route[i] = tri[temp][i];
			else
			{
				route[i] = tri[temp - 1][i];
				temp = temp - 1;
			}
		}
		printf("%d\n", max);    
		for (int i = 1; i < N;i++)
			printf("%d ", route[i]);
		printf("%d\n", route[N]);
	}

	return 0;
}
